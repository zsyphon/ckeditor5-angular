/**
 * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ɵ0 = (val, index) => ('0' + (index).toString(16)).slice(-2);
// A copy of @ckeditor/ckeditor5-utils/src/uid.js
// A hash table of hex numbers to avoid using toString() in uid() which is costly.
// [ '00', '01', '02', ..., 'fe', 'ff' ]
const HEX_NUMBERS = new Array(256).fill(0)
    .map(ɵ0);
/**
 * Returns a unique id. The id starts with an "e" character and a randomly generated string of
 * 32 alphanumeric characters.
 *
 * **Note**: The characters the unique id is built from correspond to the hex number notation
 * (from "0" to "9", from "a" to "f"). In other words, each id corresponds to an "e" followed
 * by 16 8-bit numbers next to each other.
 *
 * @returns An unique id string.
 */
export default function uid() {
    // Let's create some positive random 32bit integers first.
    //
    // 1. Math.random() is a float between 0 and 1.
    // 2. 0x100000000 is 2^32 = 4294967296.
    // 3. >>> 0 enforces integer (in JS all numbers are floating point).
    //
    // For instance:
    //		Math.random() * 0x100000000 = 3366450031.853859
    // but
    //		Math.random() * 0x100000000 >>> 0 = 3366450031.
    const r1 = Math.random() * 0x100000000 >>> 0;
    const r2 = Math.random() * 0x100000000 >>> 0;
    const r3 = Math.random() * 0x100000000 >>> 0;
    const r4 = Math.random() * 0x100000000 >>> 0;
    // Make sure that id does not start with number.
    return 'e' +
        HEX_NUMBERS[r1 >> 0 & 0xFF] +
        HEX_NUMBERS[r1 >> 8 & 0xFF] +
        HEX_NUMBERS[r1 >> 16 & 0xFF] +
        HEX_NUMBERS[r1 >> 24 & 0xFF] +
        HEX_NUMBERS[r2 >> 0 & 0xFF] +
        HEX_NUMBERS[r2 >> 8 & 0xFF] +
        HEX_NUMBERS[r2 >> 16 & 0xFF] +
        HEX_NUMBERS[r2 >> 24 & 0xFF] +
        HEX_NUMBERS[r3 >> 0 & 0xFF] +
        HEX_NUMBERS[r3 >> 8 & 0xFF] +
        HEX_NUMBERS[r3 >> 16 & 0xFF] +
        HEX_NUMBERS[r3 >> 24 & 0xFF] +
        HEX_NUMBERS[r4 >> 0 & 0xFF] +
        HEX_NUMBERS[r4 >> 8 & 0xFF] +
        HEX_NUMBERS[r4 >> 16 & 0xFF] +
        HEX_NUMBERS[r4 >> 24 & 0xFF];
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy9ja2VkaXRvci8iLCJzb3VyY2VzIjpbInVpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7V0FPSSxDQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsR0FBRyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsUUFBUSxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFFO0FBTHZFLGlEQUFpRDtBQUVqRCxrRkFBa0Y7QUFDbEYsd0NBQXdDO0FBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUU7S0FDNUMsR0FBRyxJQUFvRSxDQUFDO0FBRTFFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxPQUFPLFVBQVUsR0FBRztJQUMxQiwwREFBMEQ7SUFDMUQsRUFBRTtJQUNGLCtDQUErQztJQUMvQyx1Q0FBdUM7SUFDdkMsb0VBQW9FO0lBQ3BFLEVBQUU7SUFDRixnQkFBZ0I7SUFDaEIsbURBQW1EO0lBQ25ELE1BQU07SUFDTixtREFBbUQ7SUFDbkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFFN0MsZ0RBQWdEO0lBQ2hELE9BQU8sR0FBRztRQUNULFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRSxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjEsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHBzOi8vY2tlZGl0b3IuY29tL2xlZ2FsL2NrZWRpdG9yLW9zcy1saWNlbnNlXHJcbiAqL1xyXG5cclxuLy8gQSBjb3B5IG9mIEBja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL3VpZC5qc1xyXG5cclxuLy8gQSBoYXNoIHRhYmxlIG9mIGhleCBudW1iZXJzIHRvIGF2b2lkIHVzaW5nIHRvU3RyaW5nKCkgaW4gdWlkKCkgd2hpY2ggaXMgY29zdGx5LlxyXG4vLyBbICcwMCcsICcwMScsICcwMicsIC4uLiwgJ2ZlJywgJ2ZmJyBdXHJcbmNvbnN0IEhFWF9OVU1CRVJTID0gbmV3IEFycmF5KCAyNTYgKS5maWxsKCAwIClcclxuXHQubWFwKCAoIHZhbCwgaW5kZXggKSA9PiAoICcwJyArICggaW5kZXggKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtMiApICk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHVuaXF1ZSBpZC4gVGhlIGlkIHN0YXJ0cyB3aXRoIGFuIFwiZVwiIGNoYXJhY3RlciBhbmQgYSByYW5kb21seSBnZW5lcmF0ZWQgc3RyaW5nIG9mXHJcbiAqIDMyIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLlxyXG4gKlxyXG4gKiAqKk5vdGUqKjogVGhlIGNoYXJhY3RlcnMgdGhlIHVuaXF1ZSBpZCBpcyBidWlsdCBmcm9tIGNvcnJlc3BvbmQgdG8gdGhlIGhleCBudW1iZXIgbm90YXRpb25cclxuICogKGZyb20gXCIwXCIgdG8gXCI5XCIsIGZyb20gXCJhXCIgdG8gXCJmXCIpLiBJbiBvdGhlciB3b3JkcywgZWFjaCBpZCBjb3JyZXNwb25kcyB0byBhbiBcImVcIiBmb2xsb3dlZFxyXG4gKiBieSAxNiA4LWJpdCBudW1iZXJzIG5leHQgdG8gZWFjaCBvdGhlci5cclxuICpcclxuICogQHJldHVybnMgQW4gdW5pcXVlIGlkIHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVpZCgpOiBzdHJpbmcge1xyXG5cdC8vIExldCdzIGNyZWF0ZSBzb21lIHBvc2l0aXZlIHJhbmRvbSAzMmJpdCBpbnRlZ2VycyBmaXJzdC5cclxuXHQvL1xyXG5cdC8vIDEuIE1hdGgucmFuZG9tKCkgaXMgYSBmbG9hdCBiZXR3ZWVuIDAgYW5kIDEuXHJcblx0Ly8gMi4gMHgxMDAwMDAwMDAgaXMgMl4zMiA9IDQyOTQ5NjcyOTYuXHJcblx0Ly8gMy4gPj4+IDAgZW5mb3JjZXMgaW50ZWdlciAoaW4gSlMgYWxsIG51bWJlcnMgYXJlIGZsb2F0aW5nIHBvaW50KS5cclxuXHQvL1xyXG5cdC8vIEZvciBpbnN0YW5jZTpcclxuXHQvL1x0XHRNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPSAzMzY2NDUwMDMxLjg1Mzg1OVxyXG5cdC8vIGJ1dFxyXG5cdC8vXHRcdE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMCA9IDMzNjY0NTAwMzEuXHJcblx0Y29uc3QgcjEgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XHJcblx0Y29uc3QgcjIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XHJcblx0Y29uc3QgcjMgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XHJcblx0Y29uc3QgcjQgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGlkIGRvZXMgbm90IHN0YXJ0IHdpdGggbnVtYmVyLlxyXG5cdHJldHVybiAnZScgK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDAgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDggJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDE2ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMSA+PiAyNCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gOCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMTYgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIyID4+IDI0ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAwICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiA4ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAxNiAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gMjQgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDAgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDggJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDE2ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByNCA+PiAyNCAmIDB4RkYgXTtcclxufVxyXG4iXX0=